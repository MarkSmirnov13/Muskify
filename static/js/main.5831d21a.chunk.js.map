{"version":3,"sources":["masks/elon_musk.png","masks/blue_mask.png","masks/sad_elon_musk.png","utils/maskify.js","components/UploadButton/uploadButton.js","components/Spinner/Spinner.js","components/DownloadButton/downloadButton.js","components/Emoji/emoji.js","components/Footer/footer.js","components/NoFacesFound/noFacesFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MaskifyApi","masks","render","loadNetwork","onChangeListener","this","noFacesFound","document","querySelector","downloadButton","elonMuskImage","spinner","imageUpload","item","Promise","all","faceapi","tinyFaceDetector","loadFromUri","process","REACT_APP_MODEL_PATH","faceLandmark68TinyNet","catch","error","console","newImage","scale","style","width","withFaceLandmarks","detection","display","overlayValues","getOverlayValues","landmarks","overlay","createElement","src","className","alt","cssText","leftOffset","topOffset","angle","appendChild","addEventListener","a","image","remove","files","naturalWidth","handleImage","jawline","getJawOutline","jawLeft","jawRight","splice","adjacent","x","opposite","y","Math","sqrt","pow","atan2","PI","length","UploadButton","htmlFor","id","type","name","Spinner","DownloadButton","downloadFunction","canvas","toBlob","blob","img","URL","createObjectURL","link","download","href","click","param","onClick","html2canvas","then","Emoji","props","role","aria-label","label","aria-hidden","symbol","Footer","NoFacesFound","sadElonMusk","App","useEffect","blueMask","elonMusk","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5831d21a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/elon_musk.cff87dbe.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_mask.ee96ab1b.png\";","module.exports = __webpack_public_path__ + \"static/media/sad_elon_musk.30184ce4.png\";","import * as faceapi from 'face-api.js';\n\nclass MaskifyApi {\n    constructor(masks) {\n        this.masks = masks;\n        this.noFacesFound = document.querySelector('.no-faces-found');\n        this.downloadButton = document.querySelector('.file-download');\n        this.elonMuskImage = document.querySelector('.elon-musk');\n        this.spinner = document.querySelector('.spinner-box');\n        this.imageUpload = document.querySelector('.file-upload__input');\n        this.item = document.querySelector('.wrapper');\n    };\n\n    async loadNetwork() {\n        await Promise.all([\n            faceapi.nets.tinyFaceDetector.loadFromUri(process.env.REACT_APP_MODEL_PATH || '/Muskify/models'),\n            faceapi.nets.faceLandmark68TinyNet.loadFromUri(process.env.REACT_APP_MODEL_PATH || '/Muskify/models'),\n        ]).catch(error => {\n            console.error('Error :(', error);\n        });\n    };\n\n    static getOverlayValues(landmarks) {\n        const jawline = landmarks.getJawOutline();\n        const jawLeft = jawline[0];\n        const jawRight = jawline.splice(-1)[0];\n        const adjacent = jawRight.x - jawLeft.x;\n        const opposite = jawRight.y - jawLeft.y;\n        const jawLength = Math.sqrt(Math.pow(adjacent, 2) + Math.pow(opposite, 2));\n        const angle = Math.atan2(opposite, adjacent) * (180 / Math.PI);\n        const width = jawLength * 1.8;\n\n        return {\n            width,\n            angle,\n            leftOffset: jawLeft.x - width * 0.21,\n            topOffset: jawline[jawline.length / 4].y - width * 0.53,\n        }\n    };\n\n    async handleImage(newImage, scale) {\n        newImage.style.width = '400px';\n\n        const detection = await faceapi\n          .detectSingleFace(newImage, new faceapi.TinyFaceDetectorOptions())\n          .withFaceLandmarks(true);\n\n        this.spinner.style.display = 'none';\n\n        if (!detection) {\n            this.noFacesFound.style.display = 'block';\n            this.downloadButton.style.display = 'none';\n            return;\n        }\n\n        this.downloadButton.style.display = 'inline-block';\n\n        const overlayValues = MaskifyApi.getOverlayValues(detection.landmarks);\n        const overlay = document.querySelector('.mask') || document.createElement('img');\n        overlay.src = this.masks[0];\n        overlay.className = 'mask';\n        overlay.alt = 'mask overlay';\n        overlay.style.cssText = `\n            position: absolute;\n            left: ${overlayValues.leftOffset * scale}px;\n            top: ${overlayValues.topOffset * scale}px;\n            width: ${overlayValues.width * scale}px;\n            transform: rotate(${overlayValues.angle}deg);\n        `;\n\n        this.item.appendChild(overlay);\n        this.item.appendChild(newImage);\n    };\n\n    onChangeListener() {\n        this.imageUpload.addEventListener('change', async () => {\n            this.spinner.style.display = 'flex';\n            this.noFacesFound.style.display = 'none';\n            if (this.image) this.image.remove();\n            if (this.elonMuskImage) this.elonMuskImage.remove();\n\n            this.image = await faceapi.bufferToImage(this.imageUpload.files[0]);\n            this.image.className = 'image';\n            const scale = 400 / this.image.naturalWidth;\n            await this.handleImage(this.image, scale);\n        });\n    };\n\n    render = () => {\n        this.loadNetwork();\n        this.onChangeListener();\n    };\n}\n\nexport const maskify = (masks) => new MaskifyApi(masks);","import React from 'react';\n\nimport './uploadButton.css'\n\nconst UploadButton = () => {\n    return (\n        <div className='file-upload'>\n            <label htmlFor='upload' className='file-upload__label'>mask yourself</label>\n            <input id='upload' className='file-upload__input' type='file' name='file-upload' />\n        </div>\n    );\n};\n\nexport default UploadButton;\n","import React from 'react';\n\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className='spinner-box'>\n            <div className='circle-border'>\n                <div className='circle-core' />\n            </div>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import React from 'react';\nimport html2canvas from 'html2canvas';\n\nimport './downloadButton.css'\n\nconst DownloadButton = () => {\n\n    function downloadFunction(canvas) {\n        canvas.toBlob(function(blob) {\n            const img = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.download = 'musked-image.png';\n            link.href = img;\n            link.click();\n        }, 'image/png', 1);\n    }\n\n    const param = {\n        scale: 3,\n    };\n\n    const downloadImage = () => {\n        html2canvas(document.querySelector(\".wrapper\"), param).then(downloadFunction)\n    };\n\n    return (\n        <div className='file-download'>\n            <label htmlFor='download' className='file-download__label'>download</label>\n            <input id='download' className='file-download__input' type='button' name='file-download' onClick={downloadImage} />\n        </div>\n    );\n};\n\nexport default DownloadButton;\n","import React from 'react';\n\nconst Emoji = props => (\n    <span\n        className='emoji'\n        role='img'\n        aria-label={props.label ? props.label : ''}\n        aria-hidden={props.label ? 'false' : 'true'}\n    >\n        {props.symbol}\n    </span>\n);\nexport default Emoji;\n","import React from 'react';\n\nimport Emoji from '../Emoji';\n\nimport './footer.css';\n\nconst Footer = () => (\n    <footer>\n        <p>\n            Created with <Emoji symbol=\"😷\" label=\"face-with-medical-mask\"/> by <a href='https://vk.com/marksmirnov13'>Mark Smirnov</a>\n        </p>\n    </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport sadElonMusk from '../../masks/sad_elon_musk.png';\n\nimport './noFacesFound.css';\n\nconst NoFacesFound = () => (\n    <div className='no-faces-found'>\n        <img src={sadElonMusk} alt='no faces found'/>\n        <p>No faces found.</p>\n    </div>\n);\n\nexport default NoFacesFound;\n","import React, { useEffect } from 'react';\n\nimport { maskify } from './utils/maskify';\nimport elonMusk from './masks/elon_musk.png';\nimport blueMask from './masks/blue_mask.png';\nimport UploadButton from './components/UploadButton/uploadButton'\nimport Spinner from './components/Spinner';\nimport DownloadButton from './components/DownloadButton';\nimport Footer from './components/Footer';\nimport NoFacesFound from './components/NoFacesFound';\n\nimport './App.css';\n\nconst App = () => {\n\n    useEffect(() => {\n        maskify([\n            blueMask,\n        ]).render();\n    }, []);\n\n    return (\n        <div className='App'>\n            <div className='title'>MUSKIFY</div>\n            <Spinner />\n            <NoFacesFound />\n            <div className='wrapper'>\n                <img src={elonMusk} alt='elon musk' className='elon-musk' />\n            </div>\n            <div className='buttons'>\n                <UploadButton />\n                <DownloadButton />\n            </div>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}